# EA Sports FIFA 21 Data Cleaning and Transformation Project
## Table of Contents
1. [Introduction](#p1)
2. [Importing Data](#p2)
3. [Understanding Data](#p3)
4. [Columns to Clean](#p4)
    * [Removing Duplicates (if any)](#p4-1)
    * [Cleaning String/Object Column(s)](#p4-2)
    * [Cleaning/Transforming Date Column(s)](#p4-3)
    * [Cleaning Columns with Symbols(UoM)](#p4-4)
5. [Reordering Columns)](#p5)
6. [Exporting Clean Data](#p6)
7. [Conclusion](#p7)
## <a name="p1">Introduction</a>
![](https://www.fifagamenews.com/wp-content/uploads/2020/06/FGN866-0.jpg)
EA Sports FIFA 21 is a popular video game that simulates soccer matches. Often, data collected from this game might be messy, containing inconsistencies, missing values, and various formatting issues. In this project, I will focus on cleaning and preparing messy FIFA 21 data for analysis using Python and Pandas.
## <a name="p2">Importing Data</a>
# Importing libraries
import pandas as pd

# Reading Data
data=pd.read_csv('/kaggle/input/fifa-21-messy-raw-dataset-for-cleaning-exploring/fifa21 raw data v2.csv')

# Always Display all the columns
pd.set_option('display.max_columns',None)

# Checking Data
data
## <a name="p3">Understanding Data</a>
data.columns
data.info()
# Converting column name with spaces to snake_case
data.columns=data.columns.str.replace(' ','_')

# Removing photoUrl and playerUrl columns, as these are not relevant for any analysis.
data.drop(['photoUrl', 'playerUrl'], axis=1, inplace=True)

# Sample data of objects columns
data.select_dtypes(include=['object']).sample(10)
## <a name="p4">Columns to Clean</a>
- Club
- Contract
- Height
- Weight
- Joined
- Loan_Date_End
- Value
- Wage
- Release_Clause
- W/F
- SM
- IR
- Hits
### <a name="p4-1">Removing Duplicates (if any)</a>
data.drop_duplicates
### <a name="p4-2">Cleaning String/Object Column(s)</a>
- Club
# Examining Unique values in Club
data['Club'].unique()
Based on the results, \n has to be removed from each record.
# Replacing '\n' with empty string
data['Club'].replace('\n', '', regex=True, inplace=True)
data['Club']
### <a name="p4-3">Cleaning/Transforming Date Column(s)</a>
- Contract
- Joined
- Loan_Date_End
# Examining Unique values in Contract column
data['Contract'].unique()
Deleting contract values for players on loan or without club
# Getting indices of players with no club
no_club_index=data[data['Club']=='No Club'].index

# Deleting Contract value for the players with no club
for x in no_club_index:
    data['Contract'][x]=''

# Getting indices of players with on loan
on_loan_index=data[pd.notnull(data['Loan_Date_End'])].index

# Deleting Contract value for the players with on loan
for x in on_loan_index:
    data['Contract'][x]=''
    
data['Contract'].unique()
# Splitting Contract Column to Contract_Date_Start and Contract_Date_End
data['Contract_Date_Start'], data['Contract_Date_End']=data['Contract'].str.split(' ~ ', 1).str

# Converting the new columns to numerical dtype
data['Contract_Date_Start']=pd.to_datetime(data['Contract_Date_Start'])
data['Contract_Date_End']=pd.to_datetime(data['Contract_Date_End'])

# Dropping Contract column
data.drop(['Contract'], axis=1, inplace=True)

print(data['Contract_Date_Start'])
print(data['Contract_Date_End'])
# Converting Joined and Loan_Date_End column from object to datetime
data['Joined']=pd.to_datetime(data['Joined'])
data['Loan_Date_End']=pd.to_datetime(data['Loan_Date_End'])
### <a name="p4-4">Cleaning Columns with Symbols(UoM)</a>
- Height
- Weight
- Value
- Wage
- Release_Clause
- W/F
- SM
- IR
- Hits
# Examining the Height column
data['Height'].unique()
Conversion of cm, inch & ft are needed
# Examining the Weight column
data['Weight'].unique()
Coversion of kg & lbs are needed
# Examining the Value, Wage and Release_Clause columns together
data.loc[:,['Value', 'Wage', 'Release_Clause']]
# Getting currency symbol and financial suffix from Value column
symbol=[]
suffix=[]
for x in range(len(data['Value'])):
    symbol.append(data['Value'][x][:1])
    suffix.append(data['Value'][x][-1:])
    
print(list(set(symbol)))
print(list(set(suffix)))
Coversion for Euros(€), Thousand(K) & Million(M) are needed
# Getting currency symbol and financial suffix from Wage column
symbol=[]
suffix=[]
for x in range(len(data['Wage'])):
    symbol.append(data['Wage'][x][:1])
    suffix.append(data['Wage'][x][-1:])
    
print(list(set(symbol)))
print(list(set(suffix)))
Coversion for Euros(€) & Thousand(K) are needed
# Getting currency symbol and financial suffix from Release_Clause column
symbol=[]
suffix=[]
for x in range(len(data['Release_Clause'])):
    symbol.append(data['Release_Clause'][x][:1])
    suffix.append(data['Release_Clause'][x][-1:])
    
print(list(set(symbol)))
print(list(set(suffix)))
Coversion for Euros(€), Thousand(K) & Million(M) are needed
# Examing the W/F, SM and IR columns together
data.loc[:,['W/F', 'SM', 'IR']]
These star rating out of 5, Hence only the first character from the value is needed.
# Examining the Hits column
data['Hits'].unique()
Coversion for Thousand(K) is needed
# Function for converting object value to float

def obj_to_float(value):
    if isinstance(value, str):
        if value.find('cm')!=-1:
            value=value.replace('cm','')
            return float(value)
        elif value.find("'")!=-1:
            value_split=value.split("\'")
            value=(float(value_split[0])*12+float(value_split[1].replace('"','')))*(2.54)
            return value
        elif value.find('kg')!=-1:
            value=value.replace('kg','')
            return float(value)
        elif value.find('lbs')!=-1:
            value=value.replace('lbs','')
            return float(value)*0.453592
        elif value.find('K')!=-1:
            value=value.replace('K','').replace('€','')
            return float(value)*1000
        elif value.find('M')!=-1:
            value=value.replace('M','').replace('€','')
            return float(value)*10e6
        elif value.find('€')!=-1:
            value=value.replace('€','')
            return float(value)
        elif value.find('★')!=-1:
            value=value[:1]
            return int(value)
        else:
            return value
    else:
        return value 
# Applying function to Height column
data['Height(cm)']=data['Height'].apply(obj_to_float)
data.drop(['Height'], axis=1, inplace=True)

# Applying function to Weight column
data['Weight(kg)']=data['Weight'].apply(obj_to_float)
data.drop(['Weight'], axis=1, inplace=True)

# Applying function to Value column
data['Value(€)']=data['Value'].apply(obj_to_float)
data.drop(['Value'], axis=1, inplace=True)

# Applying function to Wage column
data['Wage(€)']=data['Wage'].apply(obj_to_float)
data.drop(['Wage'], axis=1, inplace=True)

# Applying function to Release_Clause column
data['Release_Clause(€)']=data['Release_Clause'].apply(obj_to_float)
data.drop(['Release_Clause'], axis=1, inplace=True)

# Applying function to W/F column
data['W/F']=data['W/F'].apply(obj_to_float)

# Applying function to SM column
data['SM']=data['SM'].apply(obj_to_float)

# Applying function to IR column
data['IR']=data['IR'].apply(obj_to_float)

# Applying function to Hits column
data['Hits']=data['Hits'].apply(obj_to_float)
## <a name="p5">Reordering Columns)</a>
reordered_columns = ['ID','Name','LongName','Nationality','Age','↓OVA','POT','Club','Joined','Contract_Date_Start',
                     'Contract_Date_End','Loan_Date_End','Positions','Height(cm)','Weight(kg)','Preferred_Foot','BOV',
                     'Best_Position','Value(€)','Wage(€)','Release_Clause(€)','Attacking','Crossing','Finishing',
                     'Heading_Accuracy','Short_Passing','Volleys','Skill','Dribbling','Curve','FK_Accuracy','Long_Passing',
                     'Ball_Control','Movement','Acceleration','Sprint_Speed','Agility','Reactions','Balance','Power',
                     'Shot_Power','Jumping','Stamina','Strength','Long_Shots','Mentality','Aggression','Interceptions',
                     'Positioning','Vision','Penalties','Composure','Defending','Marking','Standing_Tackle','Sliding_Tackle',
                     'Goalkeeping','GK_Diving','GK_Handling','GK_Kicking','GK_Positioning','GK_Reflexes','Total_Stats',
                     'Base_Stats','W/F','SM','A/W','D/W','IR','PAC','SHO','PAS','DRI','DEF','PHY','Hits']

data=data[reordered_columns]
data
data.info()
## <a name="p6">Exporting Clean Data</a>
data.to_csv('fifa21_data.csv')
## <a name="p7">Conclusion</a>
The cleaned dataset is now ready for more advanced analysis, such as exploring player statistics, team performance, or other insights that can provide a deeper understanding of the FIFA 21 game.
